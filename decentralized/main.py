import matplotlib.pyplot as plt
import numpy as np

from Swarm import Swarm


# –§—É–Ω–∫—Ü—ñ—è —Å—Ñ–µ—Ä–∏ - –ø—Ä–æ—Å—Ç–∞ —É–Ω—ñ–º–æ–¥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def sphere_function(x):
    return np.sum(x ** 2)


# –§—É–Ω–∫—Ü—ñ—è –†–∞—Å—Ç—Ä–∏–≥—ñ–Ω–∞ - —Å–∫–ª–∞–¥–Ω–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def rastrigin_function(x):
    A = 10
    n = len(x)
    return A * n + np.sum(x ** 2 - A * np.cos(2 * np.pi * x))


# –§—É–Ω–∫—Ü—ñ—è –ê–∫–ª—ñ - —Å–∫–ª–∞–¥–Ω–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def ackley_function(x):
    a, b, c = 20, 0.2, 2 * np.pi
    n = len(x)
    sum1 = np.sum(x ** 2)
    sum2 = np.sum(np.cos(c * x))
    return -a * np.exp(-b * np.sqrt(sum1 / n)) - np.exp(sum2 / n) + a + np.exp(1)


def main():
    print("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ PSO")
    print("=" * 50)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
    num_particles = 20
    dimensions = 2
    bounds = (-5.0, 5.0)
    max_iterations = 100

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—ñ–π
    swarm = Swarm(num_particles, dimensions, bounds)

    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–æ–ø–æ–ª–æ–≥—ñ–π
    topologies = [
        ("Ring", lambda: swarm.setup_ring_topology()),
        ("Star", lambda: swarm.setup_star_topology()),
        ("Random", lambda: swarm.setup_random_topology(3))
    ]

    functions = [
        ("Sphere", sphere_function),
        ("Rastrigin", rastrigin_function)
    ]

    results = {}

    for func_name, fitness_func in functions:
        print(f"\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó: {func_name}")
        print("-" * 30)

        results[func_name] = {}

        for topo_name, topo_setup in topologies:
            print(f"  –¢–æ–ø–æ–ª–æ–≥—ñ—è: {topo_name}")

            # –°–∫–∏–Ω—É—Ç–∏ —Ä—ñ–π
            swarm = Swarm(num_particles, dimensions, bounds)
            topo_setup()

            # –í–∏–∫–æ–Ω–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é
            for iteration in range(max_iterations):
                swarm.perform_iteration(fitness_func)

                if iteration % 20 == 0:
                    status = swarm.get_swarm_status()
                    print(f"    –Ü—Ç–µ—Ä–∞—Ü—ñ—è {iteration:3d}: Best = {status['global_best_fitness']:.6f}")

            final_status = swarm.get_swarm_status()
            results[func_name][topo_name] = {
                'final_fitness': final_status['global_best_fitness'],
                'convergence': final_status['convergence_history']
            }

            print(f"    –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_status['global_best_fitness']:.6f}")
            print(f"    –ü–æ–∑–∏—Ü—ñ—è: {final_status['global_best_position']}")

    return results


def visualize_swarm_behavior(results):
    """–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""

    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ PSO', fontsize=16, fontweight='bold')

    # –ö–æ–ª—å–æ—Ä–∏ —Ç–∞ —Å—Ç–∏–ª—ñ –¥–ª—è —Ç–æ–ø–æ–ª–æ–≥—ñ–π
    topology_colors = {'Ring': 'blue', 'Star': 'red', 'Random': 'green'}
    topology_styles = {'Ring': '-', 'Star': '--', 'Random': '-.'}

    # 1. –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó Sphere
    ax1 = axes[0, 0]
    for topology, data in results['Sphere'].items():
        convergence = data['convergence']
        ax1.plot(convergence, label=topology,
                 color=topology_colors[topology],
                 linestyle=topology_styles[topology],
                 linewidth=2)

    ax1.set_title('–ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è: –§—É–Ω–∫—Ü—ñ—è Sphere', fontweight='bold')
    ax1.set_xlabel('–Ü—Ç–µ—Ä–∞—Ü—ñ—è')
    ax1.set_ylabel('–ù–∞–π–∫—Ä–∞—â–∏–π fitness')
    ax1.set_yscale('log')
    ax1.legend()
    ax1.grid(True, alpha=0.3)

    # 2. –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó Rastrigin
    ax2 = axes[0, 1]
    for topology, data in results['Rastrigin'].items():
        convergence = data['convergence']
        ax2.plot(convergence, label=topology,
                 color=topology_colors[topology],
                 linestyle=topology_styles[topology],
                 linewidth=2)

    ax2.set_title('–ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è: –§—É–Ω–∫—Ü—ñ—è Rastrigin', fontweight='bold')
    ax2.set_xlabel('–Ü—Ç–µ—Ä–∞—Ü—ñ—è')
    ax2.set_ylabel('–ù–∞–π–∫—Ä–∞—â–∏–π fitness')
    ax2.set_yscale('log')
    ax2.legend()
    ax2.grid(True, alpha=0.3)

    # 3. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    ax3 = axes[1, 0]
    functions = list(results.keys())
    topologies = list(results[functions[0]].keys())

    x = np.arange(len(functions))
    width = 0.25

    for i, topology in enumerate(topologies):
        values = [results[func][topology]['final_fitness'] for func in functions]
        bars = ax3.bar(x + i * width, values, width, label=topology,
                       color=topology_colors[topology], alpha=0.7)

        # –î–æ–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ–≤–ø—á–∏–∫–∏
        for bar, value in zip(bars, values):
            height = bar.get_height()
            ax3.text(bar.get_x() + bar.get_width() / 2., height,
                     f'{value:.3f}', ha='center', va='bottom', fontsize=9)

    ax3.set_title('–§—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏', fontweight='bold')
    ax3.set_xlabel('–§—É–Ω–∫—Ü—ñ—è')
    ax3.set_ylabel('–§—ñ–Ω–∞–ª—å–Ω–∏–π fitness')
    ax3.set_yscale('log')
    ax3.set_xticks(x + width)
    ax3.set_xticklabels(functions)
    ax3.legend()
    ax3.grid(True, alpha=0.3)

    # 4. –®–≤–∏–¥–∫—ñ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó (—Å–∫—ñ–ª—å–∫–∏ —ñ—Ç–µ—Ä–∞—Ü—ñ–π –¥–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ø–µ–≤–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è)
    ax4 = axes[1, 1]

    # –î–ª—è –∫–æ–∂–Ω–æ—ó —Ç–æ–ø–æ–ª–æ–≥—ñ—ó —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–Ω–∞–π—Ç–∏ —ñ—Ç–µ—Ä–∞—Ü—ñ—é, –∫–æ–ª–∏ –¥–æ—Å—è–≥–ª–∏ 95% –≤—ñ–¥ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    convergence_speeds = {}
    threshold_factor = 1.05  # 5% –≤—ñ–¥ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è

    for func_name in results.keys():
        convergence_speeds[func_name] = {}
        for topology in results[func_name].keys():
            convergence = results[func_name][topology]['convergence']
            final_fitness = results[func_name][topology]['final_fitness']
            threshold = final_fitness * threshold_factor

            # –ó–Ω–∞–π—Ç–∏ –ø–µ—Ä—à—É —ñ—Ç–µ—Ä–∞—Ü—ñ—é, –∫–æ–ª–∏ –¥–æ—Å—è–≥–ª–∏ –ø–æ—Ä–æ–≥—É
            converged_at = len(convergence)  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –æ—Å—Ç–∞–Ω–Ω—è —ñ—Ç–µ—Ä–∞—Ü—ñ—è
            for i, fitness in enumerate(convergence):
                if fitness <= threshold:
                    converged_at = i
                    break

            convergence_speeds[func_name][topology] = converged_at

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç–æ–≤–ø—á–∏–∫–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó
    x = np.arange(len(functions))
    width = 0.25

    for i, topology in enumerate(topologies):
        values = [convergence_speeds[func][topology] for func in functions]
        bars = ax4.bar(x + i * width, values, width, label=topology,
                       color=topology_colors[topology], alpha=0.7)

        # –î–æ–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ–≤–ø—á–∏–∫–∏
        for bar, value in zip(bars, values):
            height = bar.get_height()
            ax4.text(bar.get_x() + bar.get_width() / 2., height + 1,
                     f'{value}', ha='center', va='bottom', fontsize=9)

    ax4.set_title('–®–≤–∏–¥–∫—ñ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó (—ñ—Ç–µ—Ä–∞—Ü—ñ—ó –¥–æ 95% —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)', fontweight='bold')
    ax4.set_xlabel('–§—É–Ω–∫—Ü—ñ—è')
    ax4.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π')
    ax4.set_xticks(x + width)
    ax4.set_xticklabels(functions)
    ax4.legend()
    ax4.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.show()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print("\nüìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:")
    print("=" * 60)

    for func_name in results.keys():
        print(f"\nüéØ –§—É–Ω–∫—Ü—ñ—è {func_name}:")
        print("-" * 40)

        # –°–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–æ–ø–æ–ª–æ–≥—ñ—ó –∑–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        sorted_topologies = sorted(results[func_name].keys(),
                                   key=lambda t: results[func_name][t]['final_fitness'])

        for i, topology in enumerate(sorted_topologies):
            final_fitness = results[func_name][topology]['final_fitness']
            converged_at = convergence_speeds[func_name][topology]
            medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â"

            print(f"  {medal} {topology:8}: "
                  f"–§—ñ–Ω–∞–ª—å–Ω–∏–π = {final_fitness:.6f}, "
                  f"–ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è = {converged_at:3d} —ñ—Ç–µ—Ä–∞—Ü—ñ–π")

    # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
    print(f"\nüèÜ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏:")
    print("-" * 40)

    overall_scores = {topology: 0 for topology in topologies}

    for func_name in results.keys():
        sorted_topologies = sorted(results[func_name].keys(),
                                   key=lambda t: results[func_name][t]['final_fitness'])
        # –î–æ–¥–∞—Ç–∏ –±–∞–ª–∏: 1-–µ –º—ñ—Å—Ü–µ = 3 –±–∞–ª–∏, 2-–µ = 2 –±–∞–ª–∏, 3-—î = 1 –±–∞–ª
        for i, topology in enumerate(sorted_topologies):
            overall_scores[topology] += (len(sorted_topologies) - i)

    # –í–∏–≤–µ—Å—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    sorted_overall = sorted(overall_scores.keys(), key=lambda t: overall_scores[t], reverse=True)
    for i, topology in enumerate(sorted_overall):
        medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â"
        print(f"  {medal} {topology}: {overall_scores[topology]} –±–∞–ª—ñ–≤")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é
    results = main()

    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è (—Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
    visualize_swarm_behavior(results)

    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π PSO —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞.")